###random forest model for (10nm bands)
rf_10nm_vascular<-randomForest(PFT_2~.,data=training_10nm_vascular,mtry=5,ntree=2001,importance=TRUE)
print(rf_10nm_vascular)
result_10nm_vascular<-data.frame(testing_10nm_vascular$PFT_2,predict(rf_10nm_vascular,testing_10nm_vascular,type = "response"))
################################Model 50nm bands########################################
#Create training and testing dataset (50nm bands)
dataset_size_50nm_vascular=floor(nrow(alaskaSpecLib_50nm_vascular)*0.80)
index<-sample(1:nrow(alaskaSpecLib_50nm_vascular),size=dataset_size_50nm_vascular)
training_50nm_vascular<-alaskaSpecLib_50nm_vascular[index,]
testing_50nm_vascular<-alaskaSpecLib_50nm_vascular[-index,]
###random forest model for (50nm bands)
rf_50nm_vascular<-randomForest(PFT_2~.,data=training_50nm_vascular,mtry=5,ntree=2001,importance=TRUE)
print(rf_50nm_vascular)
result_50nm_vascular<-data.frame(testing_50nm_vascular$PFT_2,predict(rf_50nm_vascular,testing_50nm_vascular,type = "response"))
################################Model 100nm bands########################################
#Create training and testing dataset (100nm bands)
dataset_size_100nm_vascular=floor(nrow(alaskaSpecLib_100nm_vascular)*0.80)
index<-sample(1:nrow(alaskaSpecLib_100nm_vascular),size=dataset_size_100nm_vascular)
training_100nm_vascular<-alaskaSpecLib_100nm_vascular[index,]
testing_100nm_vascular<-alaskaSpecLib_100nm_vascular[-index,]
###random forest model for (100nm bands)
rf_100nm_vascular<-randomForest(PFT_2~.,data=training_100nm_vascular,mtry=5,ntree=2001,importance=TRUE)
print(rf_100nm_vascular)
result_100nm_vascular<-data.frame(testing_100nm_vascular$PFT_2,predict(rf_100nm_vascular,testing_100nm_vascular,type = "response"))
###extract error rate
error_rf_vascular<-as.data.frame(rf_vascular$err.rate[2001,1])
names(error_rf_vascular)[1]<-"all_bands"
error_rf_5nm_vascular<-as.data.frame(rf_5nm_vascular$err.rate[2001,1])
names(error_rf_5nm_vascular)[1]<-"5nm"
error_rf_10nm_vascular<-as.data.frame(rf_10nm_vascular$err.rate[2001,1])
names(error_rf_10nm_vascular)[1]<-"10nm"
error_rf_50nm_vascular<-as.data.frame(rf_50nm_vascular$err.rate[2001,1])
names(error_rf_50nm_vascular)[1]<-"50nm"
error_rf_100nm_vascular<-as.data.frame(rf_100nm_vascular$err.rate[2001,1])
names(error_rf_100nm_vascular)[1]<-"100nm"
###Make data frame from error rate
error_rate_vascular<-merge(error_rf_vascular,
error_rf_5nm_vascular,
error_rf_10nm_vascular,
error_rf_50nm_vascular,
error_rf_100nm_vascular)
error_rate_vascular$category<-"Vascular"
##write to folder
write.csv(error_rate_vascular,"Model Scripts/Error Rates/Regular/error_rate_vascular.csv",row.names = F)
View(error_rf_100nm_vascular)
###Make data frame from error rate
error_rate_plants<-cbind(error_rf_plants,
error_rf_5nm_plants,
error_rf_10nm_plants,
error_rf_50nm_plants,
error_rf_100nm_plants)
###extract error rate
error_rf_plants<-as.data.frame(rf_plants$err.rate[2001,1])
###extract error rate
error_rf_plants<-as.data.frame(rf_plants$err.rate[2001,1])
###random forest model for (plant and abiotic scans)
rf_plants<-randomForest(PFT_2~.,data=training_plants,mtry=5,ntree=2001,importance=TRUE)
alaskaSpecLib_plants<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_plants.csv")
alaskaSpecLib_5nm_plants<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_5nm_plants.csv")
alaskaSpecLib_10nm_plants<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_10nm_plants.csv")
alaskaSpecLib_50nm_plants<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_50nm_plants.csv")
alaskaSpecLib_100nm_plants<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_100nm_plants.csv")
## Remove unwanted metadata
alaskaSpecLib_plants[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_5nm_plants[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_10nm_plants[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_50nm_plants[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_100nm_plants[c("ScanID","PFT","PFT_3","area")] = NULL
#Convert to factor
alaskaSpecLib_plants$PFT_2<-as.factor(alaskaSpecLib_plants$PFT_2)
alaskaSpecLib_5nm_plants$PFT_2<-as.factor(alaskaSpecLib_5nm_plants$PFT_2)
alaskaSpecLib_10nm_plants$PFT_2<-as.factor(alaskaSpecLib_10nm_plants$PFT_2)
alaskaSpecLib_50nm_plants$PFT_2<-as.factor(alaskaSpecLib_50nm_plants$PFT_2)
alaskaSpecLib_100nm_plants$PFT_2<-as.factor(alaskaSpecLib_50nm_plants$PFT_2)
################################Model all bands#######################################
#Create training and testing dataset (all bands)
dataset_size_plants=floor(nrow(alaskaSpecLib_plants)*0.80)
index<-sample(1:nrow(alaskaSpecLib_plants),size=dataset_size_plants)
training_plants<-alaskaSpecLib_plants[index,]
testing_plants<-alaskaSpecLib_plants[-index,]
###random forest model for (plant and abiotic scans)
rf_plants<-randomForest(PFT_2~.,data=training_plants,mtry=5,ntree=2001,importance=TRUE)
print(rf_plants)
result_plants<-data.frame(testing_plants$PFT_2,predict(rf_plants,testing_plants,type = "response"))
################################Model 5nm bands########################################
#Create training and testing dataset (5nm bands)
dataset_size_5nm_plants=floor(nrow(alaskaSpecLib_5nm_plants)*0.80)
index<-sample(1:nrow(alaskaSpecLib_5nm_plants),size=dataset_size_5nm_plants)
training_5nm_plants<-alaskaSpecLib_5nm_plants[index,]
testing_5nm_plants<-alaskaSpecLib_5nm_plants[-index,]
###random forest model for (5nm bands)
rf_5nm_plants<-randomForest(PFT_2~.,data=training_5nm_plants,mtry=5,ntree=2001,importance=TRUE)
print(rf_5nm_plants)
result_5nm_plants<-data.frame(testing_5nm_plants$PFT_2,predict(rf_5nm_plants,testing_5nm_plants,type = "response"))
################################Model 10nm bands########################################
##alaskaSpecLib (10nm bands)
#Create training and testing dataset (10nm bands)
dataset_size_10nm_plants=floor(nrow(alaskaSpecLib_10nm_plants)*0.80)
index<-sample(1:nrow(alaskaSpecLib_10nm_plants),size=dataset_size_10nm_plants)
training_10nm_plants<-alaskaSpecLib_10nm_plants[index,]
testing_10nm_plants<-alaskaSpecLib_10nm_plants[-index,]
###random forest model for (10nm bands)
rf_10nm_plants<-randomForest(PFT_2~.,data=training_10nm_plants,mtry=5,ntree=2001,importance=TRUE)
print(rf_10nm_plants)
result_10nm_plants<-data.frame(testing_10nm_plants$PFT_2,predict(rf_10nm_plants,testing_10nm_plants,type = "response"))
################################Model 50nm bands########################################
#Create training and testing dataset (50nm bands)
dataset_size_50nm_plants=floor(nrow(alaskaSpecLib_50nm_plants)*0.80)
index<-sample(1:nrow(alaskaSpecLib_50nm_plants),size=dataset_size_50nm_plants)
training_50nm_plants<-alaskaSpecLib_50nm_plants[index,]
testing_50nm_plants<-alaskaSpecLib_50nm_plants[-index,]
###random forest model for (50nm bands)
rf_50nm_plants<-randomForest(PFT_2~.,data=training_50nm_plants,mtry=5,ntree=2001,importance=TRUE)
print(rf_50nm_plants)
result_50nm_plants<-data.frame(testing_50nm_plants$PFT_2,predict(rf_50nm_plants,testing_50nm_plants,type = "response"))
################################Model 100nm bands########################################
#Create training and testing dataset (100nm bands)
dataset_size_100nm_plants=floor(nrow(alaskaSpecLib_100nm_plants)*0.80)
index<-sample(1:nrow(alaskaSpecLib_100nm_plants),size=dataset_size_100nm_plants)
training_100nm_plants<-alaskaSpecLib_100nm_plants[index,]
testing_100nm_plants<-alaskaSpecLib_100nm_plants[-index,]
###random forest model for (100nm bands)
rf_100nm_plants<-randomForest(PFT_2~.,data=training_100nm_plants,mtry=5,ntree=2001,importance=TRUE)
print(rf_100nm_plants)
result_100nm_plants<-data.frame(testing_100nm_plants$PFT_2,predict(rf_100nm_plants,testing_100nm_plants,type = "response"))
###extract error rate
error_rf_plants<-as.data.frame(rf_plants$err.rate[2001,1])
names(error_rf_plants)[1]<-"all_bands"
error_rf_5nm_plants<-as.data.frame(rf_5nm_plants$err.rate[2001,1])
names(error_rf_5nm_plants)[1]<-"5nm"
error_rf_10nm_plants<-as.data.frame(rf_10nm_plants$err.rate[2001,1])
names(error_rf_10nm_plants)[1]<-"10nm"
error_rf_50nm_plants<-as.data.frame(rf_50nm_plants$err.rate[2001,1])
names(error_rf_50nm_plants)[1]<-"50nm"
error_rf_100nm_plants<-as.data.frame(rf_100nm_plants$err.rate[2001,1])
names(error_rf_100nm_plants)[1]<-"100nm"
###Make data frame from error rate
error_rate_plants<-cbind(error_rf_plants,
error_rf_5nm_plants,
error_rf_10nm_plants,
error_rf_50nm_plants,
error_rf_100nm_plants)
error_rate_plants$category<-"All_plants"
##write to folder
write.csv(error_rate_plants,"Model Scripts/Error Rates/Regular/error_rate_plants.csv",row.names = F)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/Regular Values/Raw Spectra/Species Level/RF_all_vascular.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/Regular Values/Smooth Spectra/General Life Form/RF_smooth_gen_life_plants.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/Regular Values/Smooth Spectra/Species Level/RF_smooth_bryo.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/Regular Values/Smooth Spectra/Species Level/RF_smooth_lichen.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/Regular Values/Smooth Spectra/Species Level/RF_smooth_plants.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/Regular Values/Smooth Spectra/Species Level/RF_smooth_vascular.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Error Rates/Error Rate Table.R', echo=TRUE)
####Read in data as spectra
AK2018_spectra<-read_spectra("/Alaska_Spectral_Library/data/20180729/AK2018",
format="sed")
library(spectrolab)
library(tidyverse)
####Read in data as spectra
AK2018_spectra<-read_spectra("/Alaska_Spectral_Library/data/20180729/AK2018",
format="sed")
setwd("/Alaska_Spectral_Library")
####Read in data as spectra
AK2018_spectra<-read_spectra("/Alaska_Spectral_Library/data/20180729/AK2018",
format="sed")
####Read in data as spectra
AK2018_spectra<-read_spectra("data/20180729/AK2018",
format="sed")
####Read in data as spectra
AK2018_spectra<-read_spectra("original_data/20180729/AK2018",
format="sed")
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/AK2018_Folder2.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/YK_Spectral_Library2.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/Bethel_Spectral_Library2.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/Bethel_Spectral_Library2.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/Brooks_Spectral_Library2.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/Murphy Dome1.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/Murphy Dome2.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/YK_Spectral_Library2.R', echo=TRUE)
setwd("/Alaska_Spectral_Library")
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/alaskaspeclib1.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/alaskaspeclib_5nm.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/alaskaspeclib_10nm.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/alaskaspeclib_50nm.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Raw Spectra/alaskaspeclib_100nm.R', echo=TRUE)
setwd("/Alaska_Spectral_Library")
####Read in data as spectra
AK2018_spectra<-read_spectra("original_data/20180729/AK2018",
format="sed")
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/AK2018_Folder2_smooth.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/Bethel_Spectral_Library2_smooth.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/Brooks_Spectral_Library2_smooth.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/Murphy Dome1_smooth.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/Murphy Dome2_smooth.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/YK_Spectral_Library2_smooth.R', echo=TRUE)
setwd("/Alaska_Spectral_Library")
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/alaskaspeclib_smooth.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/alaskaspeclib_smooth_5nm.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/alaskaspeclib_smooth_10nm.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/alaskaspeclib_smooth_50nm.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Processing Scripts/Smooth Spectra/alaskaspeclib_smooth_100nm.R', echo=TRUE)
library(randomForest)
setwd("/Alaska_Spectral_Library")
###reads in alaskaspeclib
alaskaSpecLib_5nm_plants<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_5nm_plants.csv")
alaskaSpecLib_5nm_bryo<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_5nm_bryo.csv")
alaskaSpecLib_5nm_lichen<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_5nm_lichen.csv")
alaskaSpecLib_5nm_vascular<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_5nm_vascular.csv")
## Remove unwanted metadata
alaskaSpecLib_5nm_plants[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_5nm_bryo[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_5nm_lichen[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_5nm_vascular[c("ScanID","PFT","PFT_3","area")] = NULL
################################Model 5nm bands_plants########################################
##PCA (5nm bands)
pca_5nm_plants<- prcomp(alaskaSpecLib_5nm_plants[,-432], retx=TRUE, center=TRUE, scale=TRUE)
expl.var_5nm_plants <- round(pca_5nm_plants$sdev^2/sum(pca_5nm_plants$sdev^2)*100)
pc6<-c(1:6)####fist 6 PC's
names_species<-as.data.frame(as.character(alaskaSpecLib_5nm_plants$PFT_2))
pca_5nm_plants<-as.data.frame(cbind(names_species,pca_5nm_plants$x[,pc6]))
names(pca_5nm_plants)[1]<-paste("PFT_2")
pca_5nm_plants$PFT_2<-as.factor(pca_5nm_plants$PFT_2)
#Create training and testing dataset (5nm bands)
dataset_size_5nm_plants=floor(nrow(pca_5nm_plants)*0.80)
index<-sample(1:nrow(pca_5nm_plants),size=dataset_size_5nm_plants)
training_5nm_plants<-pca_5nm_plants[index,]
testing_5nm_plants<-pca_5nm_plants[-index,]
###random forest model for (5nm bands)
rf_5nm_plants<-randomForest(PFT_2~.,data=training_5nm_plants,mtry=5,ntree=2001,importance=TRUE)
result_5nm_plants<-data.frame(testing_5nm_plants$PFT_2,predict(rf_5nm_plants,testing_5nm_plants,type = "response"))
result_5nm_plants
table(result_5nm_plants)
confusion_matrix_raw_5nm_plants<-table(result_5nm_plants)
confusion_matrix_raw_5nm_plants
confusion_matrix_raw_5nm_plants<-as.data.frame(table(result_5nm_plants))
View(confusion_matrix_raw_5nm_plants)
as.data.frame(table(result_5nm_plants))
rf_5nm_plants
rf_5nm_plants$confusion
a<-rf_5nm_plants$confusion
a<-as.data.frame(rf_5nm_plants$confusion)
View(a)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/PCA Values/Raw Spectra/Species level/RF_PCA_species_plants.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/PCA Values/Raw Spectra/Species level/RF_PCA_species_bryo.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/PCA Values/Raw Spectra/Species level/RF_PCA_species_lichen.R', echo=TRUE)
library(pls)
library(randomForest)
setwd("/Alaska_Spectral_Library")
###reads in alaskaspeclib
alaskaSpecLib_lichen<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_lichen.csv")
alaskaSpecLib_5nm_lichen<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_5nm_lichen.csv")
alaskaSpecLib_10nm_lichen<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_10nm_lichen.csv")
alaskaSpecLib_50nm_lichen<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_50nm_lichen.csv")
alaskaSpecLib_100nm_lichen<-read.csv("processed spec/AlaskaSpecLib/alaskaSpecLib_100nm_lichen.csv")
## Remove unwanted metadata
alaskaSpecLib_lichen[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_5nm_lichen[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_10nm_lichen[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_50nm_lichen[c("ScanID","PFT","PFT_3","area")] = NULL
alaskaSpecLib_100nm_lichen[c("ScanID","PFT","PFT_3","area")] = NULL
################################Model all bands########################################
##PCA (all bands)
pca_lichen<- prcomp(alaskaSpecLib_lichen[,-2152], retx=TRUE, center=TRUE, scale=TRUE)
expl.var_lichen <- round(pca_lichen$sdev^2/sum(pca_lichen$sdev^2)*100)
pc6<-c(1:6)####fist 6 PC's
names_species<-as.data.frame(as.character(alaskaSpecLib_lichen$PFT_2))
pca_lichen<-as.data.frame(cbind(names_species,pca_lichen$x[,pc6]))
names(pca_lichen)[1]<-paste("PFT_2")
pca_lichen$PFT_2<-as.factor(pca_lichen$PFT_2)
#Create training and testing dataset (all bands)
dataset_size_lichen=floor(nrow(pca_lichen)*0.80)
index<-sample(1:nrow(pca_lichen),size=dataset_size_lichen)
training_lichen<-pca_lichen[index,]
testing_lichen<-pca_lichen[-index,]
###random forest model for (plant and abiotic scans)
rf_lichen<-randomForest(PFT_2~.,data=training_lichen,mtry=5,ntree=2001,importance=TRUE)
result_lichen<-data.frame(testing_lichen$PFT_2,predict(rf_lichen,testing_lichen,type = "response"))
confusion_martrix_lichen<-as.data.frame(rf_lichen$confusion)
################################Model 5nm bands########################################
##PCA (5nm bands)
pca_5nm_lichen<- prcomp(alaskaSpecLib_5nm_lichen[,-432], retx=TRUE, center=TRUE, scale=TRUE)
expl.var_5nm_lichen <- round(pca_5nm_lichen$sdev^2/sum(pca_5nm_lichen$sdev^2)*100)
pc6<-c(1:6)####fist 6 PC's
names_species<-as.data.frame(as.character(alaskaSpecLib_5nm_lichen$PFT_2))
pca_5nm_lichen<-as.data.frame(cbind(names_species,pca_5nm_lichen$x[,pc6]))
names(pca_5nm_lichen)[1]<-paste("PFT_2")
pca_5nm_lichen$PFT_2<-as.factor(pca_5nm_lichen$PFT_2)
#Create training and testing dataset (5nm bands)
dataset_size_5nm_lichen=floor(nrow(pca_5nm_lichen)*0.80)
index<-sample(1:nrow(pca_5nm_lichen),size=dataset_size_5nm_lichen)
training_5nm_lichen<-pca_5nm_lichen[index,]
testing_5nm_lichen<-pca_5nm_lichen[-index,]
###random forest model for (5nm bands)
rf_5nm_lichen<-randomForest(PFT_2~.,data=training_5nm_lichen,mtry=5,ntree=2001,importance=TRUE)
result_5nm_lichen<-data.frame(testing_5nm_lichen$PFT_2,predict(rf_5nm_lichen,testing_5nm_lichen,type = "response"))
confusion_martrix_5nm_lichen<-as.data.frame(rf_5nm_lichen$confusion)
################################Model 10nm bands########################################
##PCA (10nm bands)
pca_10nm_lichen<- prcomp(alaskaSpecLib_10nm_lichen[,-217], retx=TRUE, center=TRUE, scale=TRUE)
expl.var_10nm_lichen <- round(pca_10nm_lichen$sdev^2/sum(pca_10nm_lichen$sdev^2)*100)
pc6<-c(1:6)####fist 6 PC's
names_species<-as.data.frame(as.character(alaskaSpecLib_10nm_lichen$PFT_2))
pca_10nm_lichen<-as.data.frame(cbind(names_species,pca_10nm_lichen$x[,pc6]))
names(pca_10nm_lichen)[1]<-paste("PFT_2")
pca_10nm_lichen$PFT_2<-as.factor(pca_10nm_lichen$PFT_2)
#Create training and testing dataset (10nm bands)
dataset_size_10nm_lichen=floor(nrow(pca_10nm_lichen)*0.80)
index<-sample(1:nrow(pca_10nm_lichen),size=dataset_size_10nm_lichen)
training_10nm_lichen<-pca_10nm_lichen[index,]
testing_10nm_lichen<-pca_10nm_lichen[-index,]
###random forest model for (10nm bands)
rf_10nm_lichen<-randomForest(PFT_2~.,data=training_10nm_lichen,mtry=5,ntree=2001,importance=TRUE)
result_10nm_lichen<-data.frame(testing_10nm_lichen$PFT_2,predict(rf_10nm_lichen,testing_10nm_lichen,type = "response"))
confusion_martrix_10nm_lichen<-as.data.frame(rf_10nm_lichen$confusion)
################################Model 50nm bands########################################
##PCA (50nm bands)
pca_50nm_lichen<- prcomp(alaskaSpecLib_50nm_lichen[,-45], retx=TRUE, center=TRUE, scale=TRUE)
expl.var_50nm_lichen <- round(pca_50nm_lichen$sdev^2/sum(pca_50nm_lichen$sdev^2)*100)
pc6<-c(1:6)####fist 6 PC's
names_species<-as.data.frame(as.character(alaskaSpecLib_50nm_lichen$PFT_2))
pca_50nm_lichen<-as.data.frame(cbind(names_species,pca_50nm_lichen$x[,pc6]))
names(pca_50nm_lichen)[1]<-paste("PFT_2")
pca_50nm_lichen$PFT_2<-as.factor(pca_50nm_lichen$PFT_2)
#Create training and testing dataset (50nm bands)
dataset_size_50nm_lichen=floor(nrow(pca_50nm_lichen)*0.80)
index<-sample(1:nrow(pca_50nm_lichen),size=dataset_size_50nm_lichen)
training_50nm_lichen<-pca_50nm_lichen[index,]
testing_50nm_lichen<-pca_50nm_lichen[-index,]
###random forest model for (50nm bands)
rf_50nm_lichen<-randomForest(PFT_2~.,data=training_50nm_lichen,mtry=5,ntree=2001,importance=TRUE)
result_50nm_lichen<-data.frame(testing_50nm_lichen$PFT_2,predict(rf_50nm_lichen,testing_50nm_lichen,type = "response"))
confusion_martrix_50nm_lichen<-as.data.frame(rf_50nm_lichen$confusion)
################################Model 100nm bands########################################
##PCA (100nm bands)
pca_100nm_lichen<- prcomp(alaskaSpecLib_100nm_lichen[,-23], retx=TRUE, center=TRUE, scale=TRUE)
expl.var_100nm_lichen <- round(pca_100nm_lichen$sdev^2/sum(pca_100nm_lichen$sdev^2)*100)
pc6<-c(1:6)####fist 6 PC's
names_species<-as.data.frame(as.character(alaskaSpecLib_100nm_lichen$PFT_2))
pca_100nm_lichen<-as.data.frame(cbind(names_species,pca_100nm_lichen$x[,pc6]))
names(pca_100nm_lichen)[1]<-paste("PFT_2")
pca_100nm_lichen$PFT_2<-as.factor(pca_100nm_lichen$PFT_2)
#Create training and testing dataset (100nm bands)
dataset_size_100nm_lichen=floor(nrow(pca_100nm_lichen)*0.80)
index<-sample(1:nrow(pca_100nm_lichen),size=dataset_size_100nm_lichen)
training_100nm_lichen<-pca_100nm_lichen[index,]
testing_100nm_lichen<-pca_100nm_lichen[-index,]
###random forest model for (100nm bands)
rf_100nm_lichen<-randomForest(PFT_2~.,data=training_100nm_lichen,mtry=5,ntree=2001,importance=TRUE)
result_100nm_lichen<-data.frame(testing_100nm_lichen$PFT_2,predict(rf_100nm_lichen,testing_100nm_lichen,type = "response"))
confusion_martrix_100nm_lichen<-as.data.frame(rf_100nm_lichen$confusion)
###extract error rate
error_rf_PCA_lichen<-as.data.frame(rf_lichen$err.rate[2001,1])
names(error_rf_PCA_lichen)[1]<-"all_bands"
error_rf_PCA_5nm_lichen<-as.data.frame(rf_5nm_lichen$err.rate[2001,1])
names(error_rf_PCA_5nm_lichen)[1]<-"5nm"
error_rf_PCA_10nm_lichen<-as.data.frame(rf_10nm_lichen$err.rate[2001,1])
names(error_rf_PCA_10nm_lichen)[1]<-"10nm"
error_rf_PCA_50nm_lichen<-as.data.frame(rf_50nm_lichen$err.rate[2001,1])
names(error_rf_PCA_50nm_lichen)[1]<-"50nm"
error_rf_PCA_100nm_lichen<-as.data.frame(rf_100nm_lichen$err.rate[2001,1])
names(error_rf_PCA_100nm_lichen)[1]<-"100nm"
###Make data frame from error rate
error_rate_PCA_lichen<-cbind(error_rf_PCA_lichen,
error_rf_PCA_5nm_lichen,
error_rf_PCA_10nm_lichen,
error_rf_PCA_50nm_lichen,
error_rf_PCA_100nm_lichen)
error_rate_PCA_lichen$category<-"Lichen"
##write to folder
write.csv(error_rate_PCA_lichen,"Model Scripts/Error Rates/PCA/Error/error_rate_PCA_lichen.csv",row.names = F)
write.csv(confusion_martrix_lichen,"Model Scripts/Error Rates/PCA/Confusion Matrix/Raw/confusion_martrix_raw_lichen.csv",row.names = F)
write.csv(confusion_martrix_5nm_lichen,"Model Scripts/Error Rates/PCA/Confusion Matrix/Raw/confusion_martrix_5nm_lichen.csv",row.names = F)
write.csv(confusion_martrix_10nm_lichen,"Model Scripts/Error Rates/PCA/Confusion Matrix/Raw/confusion_martrix_10nm_lichen.csv",row.names = F)
write.csv(confusion_martrix_50nm_lichen,"Model Scripts/Error Rates/PCA/Confusion Matrix/Raw/confusion_martrix_50nm_lichen.csv",row.names = F)
write.csv(confusion_martrix_100nm_lichen,"Model Scripts/Error Rates/PCA/Confusion Matrix/Raw/confusion_martrix_100nm_lichen.csv",row.names = F)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/PCA Values/Raw Spectra/Species level/RF_PCA_species_vascular.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/PCA Values/Raw Spectra/General Life form/RF_PCA_gen_life_plants.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Models/Random Forest/PCA Values/Raw Spectra/General Life form/RF_PCA_gen_life_plants.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Error Rates/Error Rate Table.R', echo=TRUE)
source('E://Alaska_Spectral_Library/Model Scripts/Error Rates/Error Rate Table.R', echo=TRUE)
###reads in alaskasspeclib
alaskaSpecLib_plants_more05 <-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_more05.csv")
alaskaSpecLib_plants_more05 <-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_more05.csv")
alaskaSpecLib_plants_more10 <-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_more10.csv")
alaskaSpecLib_plants_more15 <-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_more15.csv")
alaskaSpecLib_plants_more20 <-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_more20.csv")
alaskaSpecLib_plants_equal05<-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_equal05.csv")
alaskaSpecLib_plants_equal10<-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_equal10.csv")
alaskaSpecLib_plants_equal15<-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_equal15.csv")
alaskaSpecLib_plants_equal20<-read.csv("Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/alaskaSpecLib_plants_equal20.csv")
## Removes unwanted metadata from dataframes
alaskaSpecLib_plants_more05 [c("ScanID","PFT","PFT_3","area","Freq","X")] = NULL
alaskaSpecLib_plants_more10 [c("ScanID","PFT","PFT_3","area","Freq","X")] = NULL
alaskaSpecLib_plants_more15 [c("ScanID","PFT","PFT_3","area","Freq","X")] = NULL
alaskaSpecLib_plants_more20 [c("ScanID","PFT","PFT_3","area","Freq","X")] = NULL
alaskaSpecLib_plants_equal05[c("ScanID","PFT","PFT_3","area","Freq","X")] = NULL
alaskaSpecLib_plants_equal10[c("ScanID","PFT","PFT_3","area","Freq","X")] = NULL
alaskaSpecLib_plants_equal15[c("ScanID","PFT","PFT_3","area","Freq","X")] = NULL
alaskaSpecLib_plants_equal20[c("ScanID","PFT","PFT_3","area","Freq","X")] = NULL
#Converts species column to a factor
alaskaSpecLib_plants_more05 $PFT_2<-as.factor(alaskaSpecLib_plants_more05 $PFT_2)
alaskaSpecLib_plants_more10 $PFT_2<-as.factor(alaskaSpecLib_plants_more10 $PFT_2)
alaskaSpecLib_plants_more15 $PFT_2<-as.factor(alaskaSpecLib_plants_more15 $PFT_2)
alaskaSpecLib_plants_more20 $PFT_2<-as.factor(alaskaSpecLib_plants_more20 $PFT_2)
alaskaSpecLib_plants_equal05$PFT_2<-as.factor(alaskaSpecLib_plants_equal05$PFT_2)
alaskaSpecLib_plants_equal10$PFT_2<-as.factor(alaskaSpecLib_plants_equal10$PFT_2)
alaskaSpecLib_plants_equal15$PFT_2<-as.factor(alaskaSpecLib_plants_equal15$PFT_2)
alaskaSpecLib_plants_equal20$PFT_2<-as.factor(alaskaSpecLib_plants_equal20$PFT_2)
################################Model more05,more10,more15,more20#######################################
##Create training and testing dataset (all bands)
#dataset_size_plants=floor(nrow(alaskaSpecLib_plants_more05)*0.80)
#index<-sample(1:nrow(alaskaSpecLib_plants_more05),size=dataset_size_plants)
#training_more05<-alaskaSpecLib_plants_more05[index,]
#testing_more05<-alaskaSpecLib_plants_more05[-index,]
#For now run models without splitting the dataset
##Creates PCA (all bands)
pca_plants_more05 <- prcomp(alaskaSpecLib_plants_more05 [,-1], retx=TRUE, center=TRUE, scale=TRUE)
pca_plants_more10 <- prcomp(alaskaSpecLib_plants_more10 [,-1], retx=TRUE, center=TRUE, scale=TRUE)
pca_plants_more15 <- prcomp(alaskaSpecLib_plants_more15 [,-1], retx=TRUE, center=TRUE, scale=TRUE)
pca_plants_more20 <- prcomp(alaskaSpecLib_plants_more20 [,-1], retx=TRUE, center=TRUE, scale=TRUE)
pca_plants_equal05<- prcomp(alaskaSpecLib_plants_equal05[,-1], retx=TRUE, center=TRUE, scale=TRUE)
pca_plants_equal10<- prcomp(alaskaSpecLib_plants_equal10[,-1], retx=TRUE, center=TRUE, scale=TRUE)
pca_plants_equal15<- prcomp(alaskaSpecLib_plants_equal15[,-1], retx=TRUE, center=TRUE, scale=TRUE)
pca_plants_equal20<- prcomp(alaskaSpecLib_plants_equal20[,-1], retx=TRUE, center=TRUE, scale=TRUE)
expl.var_plants_more05 <- round(pca_plants_more05$sdev^2/sum(pca_plants_more05$sdev^2)*100)
expl.var_plants_more10 <- round(pca_plants_more10$sdev^2/sum(pca_plants_more10$sdev^2)*100)
expl.var_plants_more15 <- round(pca_plants_more15$sdev^2/sum(pca_plants_more15$sdev^2)*100)
expl.var_plants_more20 <- round(pca_plants_more20$sdev^2/sum(pca_plants_more20$sdev^2)*100)
expl.var_plants_equal05<- round(pca_plants_equal05$sdev^2/sum(pca_plants_equal05$sdev^2)*100)
expl.var_plants_equal10<- round(pca_plants_equal10$sdev^2/sum(pca_plants_equal10$sdev^2)*100)
expl.var_plants_equal15<- round(pca_plants_equal15$sdev^2/sum(pca_plants_equal15$sdev^2)*100)
expl.var_plants_equal20<- round(pca_plants_equal20$sdev^2/sum(pca_plants_equal20$sdev^2)*100)
####fist 6 PC's
pc6<-c(1:6)
#creates dataframe with first 6 PCA vales for each species
names_species_more05 <-as.data.frame(as.character(alaskaSpecLib_plants_more05 $PFT_2))
names_species_more10 <-as.data.frame(as.character(alaskaSpecLib_plants_more10 $PFT_2))
names_species_more15 <-as.data.frame(as.character(alaskaSpecLib_plants_more15 $PFT_2))
names_species_more20 <-as.data.frame(as.character(alaskaSpecLib_plants_more20 $PFT_2))
names_species_equal05<-as.data.frame(as.character(alaskaSpecLib_plants_equal05$PFT_2))
names_species_equal10<-as.data.frame(as.character(alaskaSpecLib_plants_equal10$PFT_2))
names_species_equal15<-as.data.frame(as.character(alaskaSpecLib_plants_equal15$PFT_2))
names_species_equal20<-as.data.frame(as.character(alaskaSpecLib_plants_equal20$PFT_2))
pca_plants_more05 <-as.data.frame(cbind(names_species_more05 ,pca_plants_more05 $x[,pc6]))
pca_plants_more10 <-as.data.frame(cbind(names_species_more10 ,pca_plants_more10 $x[,pc6]))
pca_plants_more15 <-as.data.frame(cbind(names_species_more15 ,pca_plants_more15 $x[,pc6]))
pca_plants_more20 <-as.data.frame(cbind(names_species_more20 ,pca_plants_more20 $x[,pc6]))
pca_plants_equal05<-as.data.frame(cbind(names_species_equal05,pca_plants_equal05$x[,pc6]))
pca_plants_equal10<-as.data.frame(cbind(names_species_equal10,pca_plants_equal10$x[,pc6]))
pca_plants_equal15<-as.data.frame(cbind(names_species_equal15,pca_plants_equal15$x[,pc6]))
pca_plants_equal20<-as.data.frame(cbind(names_species_equal20,pca_plants_equal20$x[,pc6]))
names(pca_plants_more05 )[1]<-paste("PFT_2")
names(pca_plants_more10 )[1]<-paste("PFT_2")
names(pca_plants_more15 )[1]<-paste("PFT_2")
names(pca_plants_more20 )[1]<-paste("PFT_2")
names(pca_plants_equal05)[1]<-paste("PFT_2")
names(pca_plants_equal10)[1]<-paste("PFT_2")
names(pca_plants_equal15)[1]<-paste("PFT_2")
names(pca_plants_equal20)[1]<-paste("PFT_2")
pca_plants_more05 $PFT_2<-as.factor(pca_plants_more05 $PFT_2)
pca_plants_more10 $PFT_2<-as.factor(pca_plants_more10 $PFT_2)
pca_plants_more15 $PFT_2<-as.factor(pca_plants_more15 $PFT_2)
pca_plants_more20 $PFT_2<-as.factor(pca_plants_more20 $PFT_2)
pca_plants_equal05$PFT_2<-as.factor(pca_plants_equal05$PFT_2)
pca_plants_equal10$PFT_2<-as.factor(pca_plants_equal10$PFT_2)
pca_plants_equal15$PFT_2<-as.factor(pca_plants_equal15$PFT_2)
pca_plants_equal20$PFT_2<-as.factor(pca_plants_equal20$PFT_2)
###Creates random forest model for (plant and abiotic scans)
rf_more05    <-randomForest(PFT_2~.,data=alaskaSpecLib_plants_more05,mtry=5,ntree=2001,importance=TRUE)
rf_more10    <-randomForest(PFT_2~.,data=alaskaSpecLib_plants_more10,mtry=5,ntree=2001,importance=TRUE)
rf_more15    <-randomForest(PFT_2~.,data=alaskaSpecLib_plants_more15,mtry=5,ntree=2001,importance=TRUE)
library(randomForest)
library(tidyverse)
rf_more05    <-randomForest(PFT_2~.,data=alaskaSpecLib_plants_more05,mtry=5,ntree=2001,importance=TRUE)
source('C:/Users/Nelson Lab/Desktop/Alaska_Spectral_Library/Scripts/Processing/Spectral_Library/Alaska_Summer_2019/Alaskaspeclib/Raw/alaskaspeclib_2019_005nm_raw.R', echo=TRUE)
source('C:/Users/Nelson Lab/Desktop/Alaska_Spectral_Library/Scripts/Processing/Spectral_Library/Alaska_Summer_2019/Alaskaspeclib/Raw/alaskaspeclib_2019_005nm_raw.R', echo=TRUE)
source('C:/Users/Nelson Lab/Desktop/Alaska_Spectral_Library/Scripts/Processing/Spectral_Library/Alaska_Summer_2019/Alaskaspeclib/Raw/alaskaspeclib_2019_010nm_raw.R', echo=TRUE)
source('C:/Users/Nelson Lab/Desktop/Alaska_Spectral_Library/Scripts/Processing/Spectral_Library/Alaska_Summer_2019/Alaskaspeclib/Raw/alaskaspeclib_2019_050nm_raw.R', echo=TRUE)
source('C:/Users/Nelson Lab/Desktop/Alaska_Spectral_Library/Scripts/Processing/Spectral_Library/Alaska_Summer_2019/Alaskaspeclib/Raw/alaskaspeclib_2019_100nm_raw.R', echo=TRUE)
source('C:/Users/Nelson Lab/Desktop/Alaska_Spectral_Library/Scripts/Processing/Spectral_Library/Alaska_Summer_2019/Alaskaspeclib/Raw/alaskaspeclib_allbands_2019_raw.R', echo=TRUE)
help("list.files")
######Reads in raw files for alaskasspeclib
alaskaspeclib_raw<-list.files(path="Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/",pattern = "alaskaSpecLib_plants")
######Reads in raw files for alaskasspeclib
alaskaspeclib_raw_files<-list.files(path="Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/",pattern = "alaskaSpecLib_plants")
alaskaspeclib_raw<-lapply(alaskaspeclib_raw_files, read.delim)
######Reads in raw files for alaskasspeclib
alaskaspeclib_raw_files<-list.files(path="Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/",pattern = ".csv")
alaskaspeclib_raw<-lapply(alaskaspeclib_raw_files, read.delim)
######Reads in raw files for alaskasspeclib
alaskaspeclib_raw_files<-list.files(path="Processed_spec/AlaskaSpecLib/Spectral_Library/Raw/2019/",pattern = "alaskaSpecLib_plants")
alaskaspeclib_raw<-lapply(alaskaspeclib_raw_files, read.csv)
alaskaspeclib_raw_files
data(leukemia)
library(plsgenomics)
data(leukemia)
install.packages("plsgenomics")
library(plsgenomics)
data(leukemia)
leukemia
View(leukemia)
# Classify observations 1,2,3 (test set) using observations 4 to 38 (training set),
# with 2 PLS components
pls.lda(Xtrain=leukemia$X[-(1:3),],Ytrain=leukemia$Y[-(1:3)],Xtest=leukemia$X[1:3,],
ncomp=2,nruncv=0)
# Classify observations 1,2,3 (test set) using observations 4 to 38 (training set),
# with 2 PLS components
a<-pls.lda(Xtrain=leukemia$X[-(1:3),],Ytrain=leukemia$Y[-(1:3)],Xtest=leukemia$X[1:3,],
ncomp=2,nruncv=0)
a$pred.lda.out
a$pred.lda.out$class
a$pred.lda.out$x
a$lda.out
